Index: gnome-control-center/panels/info/cc-info-overview-panel.c
===================================================================
--- gnome-control-center.orig/panels/info/cc-info-overview-panel.c
+++ gnome-control-center/panels/info/cc-info-overview-panel.c
@@ -49,7 +49,13 @@
 #include "gsd-disk-space-helper.h"
 
 #include "cc-info-overview-panel.h"
+#include "pop_upgrade_gtk.h"
 
+// Allow the upgrade widget to outlive the lifetime of its panel.
+static PopUpgradeWidget *POP_UPGRADE = NULL;
+
+// Atomic integeger for fetching the current status.
+extern gint POP_UPGRADE_STATUS = 0;
 
 typedef struct {
   /* Will be one or 2 GPU name strings, or "Unknown" */
@@ -86,6 +92,12 @@ typedef struct
   guint64         total_bytes;
 
   GraphicsData   *graphics_data;
+
+  /* Pop Upgrade */
+  GtkWidget        *column_box;
+  GtkWidget        *overlay;
+  GtkWidget        *info_bar;
+  GtkWidget        *info_msg;
 } CcInfoOverviewPanelPrivate;
 
 struct _CcInfoOverviewPanel
@@ -838,6 +850,10 @@ cc_info_overview_panel_dispose (GObject
 
   g_clear_pointer (&priv->graphics_data, graphics_data_free);
 
+  // Detach the pop-upgrade widget on disposing this panel.
+  GtkWidget *pop = pop_upgrade_widget_container (POP_UPGRADE);
+  gtk_container_remove (GTK_CONTAINER (priv->column_box), pop);
+
   G_OBJECT_CLASS (cc_info_overview_panel_parent_class)->dispose (object);
 }
 
@@ -888,9 +904,38 @@ cc_info_overview_panel_class_init (CcInf
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, grid1);
   gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, label18);
 
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, column_box);
+  gtk_widget_class_bind_template_child_private (widget_class, CcInfoOverviewPanel, overlay);
+
   g_type_ensure (CC_TYPE_HOSTNAME_ENTRY);
 }
 
+static void info_bar_non_visible (GtkWidget *info_bar, gpointer user_data) {
+  gtk_widget_set_visible (info_bar, FALSE);
+}
+
+static void pop_upgrade_callback_error (const uint8_t *message, size_t len, CcInfoOverviewPanelPrivate *priv) {
+  // If the the pop upgrade widget has a parent widget, it's attached to `priv`.
+  if (NULL != gtk_widget_get_parent (pop_upgrade_widget_container (POP_UPGRADE))) {
+    g_autoptr (GString) gmessage = g_string_new_len (message, len);
+    gtk_label_set_label (GTK_LABEL (priv->info_msg), gmessage->str);
+    gtk_widget_set_visible (priv->info_bar, TRUE);
+  }
+}
+
+static void pop_upgrade_callback_event (uint8_t event, gpointer user_data) {
+  g_atomic_int_set (&POP_UPGRADE_STATUS, (gint) event);
+  fprintf (stderr, "Setting status to %d\n", (gint) event);
+}
+
+static void pop_upgrade_callback_ready (gpointer user_data) {
+  g_autoptr(GError) error = NULL;
+  gchar *argv[] = { "/usr/bin/gnome-control-center", "info-overview", NULL };
+  if (!g_spawn_async (NULL, argv, NULL, 0, NULL, NULL, NULL, &error)) {
+    g_warning ("Failed to open info overview: %s", error->message);
+  }
+}
+
 static void
 cc_info_overview_panel_init (CcInfoOverviewPanel *self)
 {
@@ -907,6 +952,54 @@ cc_info_overview_panel_init (CcInfoOverv
   else
     gtk_widget_destroy (priv->updates_button);
 
+  // Start of Pop!_OS Upgrade Integration
+
+  priv->info_msg = gtk_label_new (NULL);
+  gtk_label_set_line_wrap (GTK_LABEL (priv->info_msg), TRUE);
+
+  priv->info_bar = gtk_info_bar_new ();
+  gtk_widget_set_can_focus (priv->info_bar, TRUE);
+  gtk_widget_set_halign (priv->info_bar, GTK_ALIGN_FILL);
+  gtk_widget_set_valign (priv->info_bar, GTK_ALIGN_START);
+  gtk_info_bar_set_message_type (GTK_INFO_BAR (priv->info_bar), GTK_MESSAGE_ERROR);
+  gtk_info_bar_set_show_close_button (GTK_INFO_BAR (priv->info_bar), TRUE);
+  g_signal_connect (priv->info_bar, "close", G_CALLBACK (info_bar_non_visible), NULL);
+  g_signal_connect (priv->info_bar, "response", G_CALLBACK (info_bar_non_visible), NULL);
+
+  GtkWidget *info_bar_content = gtk_info_bar_get_content_area (GTK_INFO_BAR (priv->info_bar));
+  gtk_container_add (GTK_CONTAINER (info_bar_content), priv->info_msg);
+
+  gtk_overlay_add_overlay (GTK_OVERLAY (priv->overlay), priv->info_bar);
+  gtk_widget_show_all (priv->overlay);
+  gtk_widget_hide (priv->info_bar);
+
+  if (NULL == POP_UPGRADE) {
+    POP_UPGRADE = pop_upgrade_widget_new ();
+
+    pop_upgrade_widget_callback_event (
+      POP_UPGRADE,
+      (PopUpgradeWidgetEventCallback) pop_upgrade_callback_event,
+      NULL
+    );
+
+    pop_upgrade_widget_callback_ready (
+      POP_UPGRADE,
+      (PopUpgradeWidgetReadyCallback) pop_upgrade_callback_ready,
+      NULL
+    );
+  }
+
+  if (g_atomic_int_get (&POP_UPGRADE_STATUS) == 0) {
+    pop_upgrade_widget_scan (POP_UPGRADE);
+  }
+
+  GtkWidget *upgrade_widget = pop_upgrade_widget_container (POP_UPGRADE);
+  gtk_widget_set_margin_top (upgrade_widget, 12);
+  gtk_container_add (GTK_CONTAINER (priv->column_box), upgrade_widget);
+  pop_upgrade_widget_callback_error (POP_UPGRADE, (PopUpgradeWidgetErrorCallback) pop_upgrade_callback_error, priv);
+
+  // End of Pop!_OS Upgrade Integration
+
   info_overview_panel_setup_overview (self);
   info_overview_panel_setup_virt (self);
 }
Index: gnome-control-center/panels/info/info-overview.ui
===================================================================
--- gnome-control-center.orig/panels/info/info-overview.ui
+++ gnome-control-center/panels/info/info-overview.ui
@@ -4,12 +4,26 @@
   <template class="CcInfoOverviewPanel" parent="CcPanel">
     <property name="visible">True</property>
     <property name="can-focus">False</property>
-    <property name="valign">center</property>
-    <property name="halign">center</property>
+    <property name="valign">fill</property>
+    <property name="halign">fill</property>
     <property name="expand">True</property>
-    <property name="margin">24</property>
     <child>
-      <object class="GtkBox">
+    <!-- Pop!_OS wrap view in scrolled window -->
+    <object class="GtkOverlay" id="overlay">
+    <child>
+    <object class="GtkScrolledWindow">
+    <property name="visible">True</property>
+    <property name="valign">fill</property>
+    <property name="halign">fill</property>
+    <property name="hscrollbar-policy">never</property>
+    <property name="vscrollbar-policy">automatic</property>
+    <property name="propagate-natural-height">True</property>
+    <property name="shadow-type">in</property>
+    <child>
+    <!-- -->
+      <object class="GtkBox" id="column_box">
+        <property name="margin">24</property>
+        <property name="halign">center</property>
         <property name="visible">True</property>
         <property name="can_focus">False</property>
         <property name="spacing">6</property>
@@ -337,5 +351,6 @@
         </child>
       </object>
     </child>
+    </object></child></object></child>
   </template>
 </interface>
Index: gnome-control-center/panels/info/meson.build
===================================================================
--- gnome-control-center.orig/panels/info/meson.build
+++ gnome-control-center/panels/info/meson.build
@@ -61,7 +61,8 @@ sources += gnome.compile_resources(
 
 deps = common_deps + [
   polkit_gobject_dep,
-  dependency('libgtop-2.0')
+  dependency('libgtop-2.0'),
+  dependency('pop_upgrade_gtk')
 ]
 
 panels_libs += static_library(
Index: gnome-control-center/panels/info/gnome-info-overview-panel.desktop.in.in
===================================================================
--- gnome-control-center.orig/panels/info/gnome-info-overview-panel.desktop.in.in
+++ gnome-control-center/panels/info/gnome-info-overview-panel.desktop.in.in
@@ -1,6 +1,6 @@
 [Desktop Entry]
 Name=About
-Comment=View information about your system
+Comment=View system and OS upgrade information
 Exec=gnome-control-center info-overview
 # Translators: Do NOT translate or transliterate this text (this is an icon file name)!
 Icon=help-about
Index: gnome-control-center/shell/cc-window.c
===================================================================
--- gnome-control-center.orig/shell/cc-window.c
+++ gnome-control-center/shell/cc-window.c
@@ -523,6 +523,10 @@ window_key_press_event_cb (GtkWidget   *
           case GDK_KEY_q:
           case GDK_KEY_W:
           case GDK_KEY_w:
+            if (g_atomic_int_get (&POP_UPGRADE_STATUS) != 0) {
+              return GDK_EVENT_STOP;
+            }
+
             gtk_widget_destroy (GTK_WIDGET (self));
             retval = GDK_EVENT_STOP;
             break;
@@ -709,6 +713,14 @@ cc_window_class_init (CcWindowClass *kla
   g_type_ensure (CC_TYPE_PANEL_LIST);
 }
 
+static void upgrade_check (GtkWidget *button, gpointer data) {
+  if (g_atomic_int_get (&POP_UPGRADE_STATUS) != 0) {
+    return;
+  }
+
+  gtk_main_quit ();
+}
+
 static void
 cc_window_init (CcWindow *self)
 {
@@ -721,6 +733,9 @@ cc_window_init (CcWindow *self)
 
   self->settings = g_settings_new ("org.gnome.ControlCenter");
 
+  /* Prevent window from being closed */
+  g_signal_connect (GTK_WINDOW (self), "delete-event", upgrade_check, NULL);
+
   /* Handle decorations for the split headers. */
   settings = gtk_settings_get_default ();
   g_signal_connect (settings,
Index: gnome-control-center/shell/cc-window.h
===================================================================
--- gnome-control-center.orig/shell/cc-window.h
+++ gnome-control-center/shell/cc-window.h
@@ -24,6 +24,8 @@
 #include <glib-object.h>
 #include "cc-shell.h"
 
+extern gint POP_UPGRADE_STATUS;
+
 G_BEGIN_DECLS
 
 #define CC_TYPE_WINDOW (cc_window_get_type ())
Index: gnome-control-center/shell/cc-application.c
===================================================================
--- gnome-control-center.orig/shell/cc-application.c
+++ gnome-control-center/shell/cc-application.c
@@ -197,6 +197,10 @@ cc_application_quit (GSimpleAction *simp
                      GVariant      *parameter,
                      gpointer       user_data)
 {
+  if (g_atomic_int_get (&POP_UPGRADE_STATUS) != 0) {
+    return;
+  }
+
   CcApplication *self = CC_APPLICATION (user_data);
 
   gtk_widget_destroy (GTK_WIDGET (self->window));
